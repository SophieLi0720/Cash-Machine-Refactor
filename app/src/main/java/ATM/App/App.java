/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ATM.App;

import ATM.App.dataLayer.Vault;
import ATM.App.processLayer.AtmMemory;
import ATM.App.processLayer.WithdrawLogic;
import ATM.App.processLayer.WithdrawResult;

import java.util.ArrayList;
import java.util.Map;
import java.util.Scanner;

public class App {
    private final AtmMemory atmMemory;
    private final Vault vault;
    private final Scanner myScanner;

    App () {
        atmMemory = new AtmMemory(100, 100);
        vault = new Vault();
        myScanner = new Scanner(System.in);
    }

    private void printWithdrawResult(Map<Integer, Integer> resultMap) {
        System.out.println("Transaction accepted...Please wait...");
        for (Map.Entry<Integer, Integer> entry : resultMap.entrySet()) {
            System.out.println("$" + entry.getKey() + " provided: " + entry.getValue());
        }
    }

    private void runApp() {

        System.out.println("Enter desired amount: ");
        int requestedAmount = myScanner.nextInt();
        int balance = vault.getVaultBalance(atmMemory.getNoteMap());

        // check balance
        if (requestedAmount <= balance) {

            // use dynamic programming to get the optimal solution
            ArrayList<Integer> notes = vault.cashInVault(atmMemory.getNoteMap());
            int noteCount = notes.size();
            int[][] combinationTable = WithdrawLogic.calculateCombination(requestedAmount, notes);

            // // The final optimal solution should be equal to requestAmount to solve the problem
            boolean error = combinationTable[noteCount][requestedAmount] != requestedAmount;
            if (!error) {
                Map<Integer, Integer> resultMap = WithdrawResult.getCombinationMap(requestedAmount, combinationTable, notes);
                printWithdrawResult(resultMap);
                atmMemory.updateNoteMap(resultMap);

            } else {
                System.out.println("Invalid amount requested...");
            }
        } else {
            System.out.println("We don't have enough money...");
        }
    }


    public static void main(String[] args) {
        App app = new App();
        while (true) app.runApp();
    }
}
